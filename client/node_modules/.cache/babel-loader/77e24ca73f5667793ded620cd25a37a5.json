{"ast":null,"code":"/*\r\n * Authors: Austin Vanburen\r\n * Description: Actions for the Spotify Query Entry component.\r\n * Client ID: 519985fe78c948d0bc50566b3590e1a0\r\n * Client Secret: 14ccafe854e7471b9756fd644e370cbc\r\n\r\n \r\n */\nimport axios from 'axios'; //github.com/spotify/web-api-examples/blob/master/client_credentials/app.js\n//github.com/axios/axios#using-applicationx-www-form-urlencoded-format\n//Dispatches Artist name. Queries name using spotify api.\n\nexport var runQuery = function runQuery(artist) {\n  console.log(artist); //Obtains authentication token from spotify.\n\n  var url = \"https://accounts.spotify.com/api/token\";\n  var headers = {\n    //Basic <clientid:clientsecret>\n    'Authorization': 'Basic 519985fe78c948d0bc50566b3590e1a0:14ccafe854e7471b9756fd644e370cbc' //Sends body in form of \"application/x-www-form-urlencoded\"\n\n  };\n  var params = new URLSearchParams();\n  params.append('grant_type', 'client_credentials');\n  return function (dispatch) {\n    axios.post(url, params, {\n      headers: headers\n    }).then(function (res) {\n      console.log(res.data);\n    }); //dispatch(runQuery(res.data));\n  }; //var url = \"https://api.spotify.com/v1/search?q=\";\n  //Replaces white space with hexcode\n  //const name = artist.replace(/\\s/g, \"%20\");\n  //url = url.concat(name);\n  //url = url.concat(\"&type=artist&limit=10\");\n  //return dispatch => {\n  //\taxios.get(url).then(res => {\n  //\t\tdispatch(runQuery(res.data));\n  //\t})\n  //};\n};\n\nvar queryArtists = function queryArtists(artists) {\n  console.log(artists); //Iterate across artists. Filter?\n};","map":{"version":3,"sources":["/Users/asmith/Documents/cs364/bandtrees/client/src/actions/SpotifyQueryEntry_Actions.js"],"names":["axios","runQuery","artist","console","log","url","headers","params","URLSearchParams","append","dispatch","post","then","res","data","queryArtists","artists"],"mappings":"AAAA;;;;;;;;AASC,OAAOA,KAAP,MAAkB,OAAlB,C,CAED;AACA;AACA;;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD,EAAY;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EADmC,CAGnC;;AACA,MAAIG,GAAG,GAAG,wCAAV;AACA,MAAIC,OAAO,GAAG;AAAE;AACf,qBAAiB,yEADJ,CAId;;AAJc,GAAd;AAKA,MAAMC,MAAM,GAAG,IAAIC,eAAJ,EAAf;AACAD,EAAAA,MAAM,CAACE,MAAP,CAAc,YAAd,EAA4B,oBAA5B;AAEA,SAAO,UAAAC,QAAQ,EAAI;AAClBV,IAAAA,KAAK,CAACW,IAAN,CAAWN,GAAX,EAAgBE,MAAhB,EAAwB;AAAED,MAAAA,OAAO,EAAEA;AAAX,KAAxB,EACCM,IADD,CACM,UAAAC,GAAG,EAAI;AAAEV,MAAAA,OAAO,CAACC,GAAR,CAAYS,GAAG,CAACC,IAAhB;AAAuB,KADtC,EADkB,CAGjB;AACD,GAJD,CAbmC,CAoBnC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA/BM;;AAiCP,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,OAAD,EAAa;AACjCb,EAAAA,OAAO,CAACC,GAAR,CAAYY,OAAZ,EADiC,CAEjC;AAEA,CAJD","sourcesContent":["/*\r\n * Authors: Austin Vanburen\r\n * Description: Actions for the Spotify Query Entry component.\r\n * Client ID: 519985fe78c948d0bc50566b3590e1a0\r\n * Client Secret: 14ccafe854e7471b9756fd644e370cbc\r\n\r\n \r\n */\r\n\r\n import axios from 'axios';\r\n\r\n//github.com/spotify/web-api-examples/blob/master/client_credentials/app.js\r\n//github.com/axios/axios#using-applicationx-www-form-urlencoded-format\r\n//Dispatches Artist name. Queries name using spotify api.\r\nexport const runQuery = (artist) => {\r\n\tconsole.log(artist);\r\n\r\n\t//Obtains authentication token from spotify.\r\n\tvar url = \"https://accounts.spotify.com/api/token\";\r\n\tvar headers = { //Basic <clientid:clientsecret>\r\n\t\t'Authorization': 'Basic 519985fe78c948d0bc50566b3590e1a0:14ccafe854e7471b9756fd644e370cbc'\r\n\t}\r\n\r\n\t//Sends body in form of \"application/x-www-form-urlencoded\"\r\n\tconst params = new URLSearchParams();\r\n\tparams.append('grant_type', 'client_credentials');\r\n\r\n\treturn dispatch => {\r\n\t\taxios.post(url, params, { headers: headers })\r\n\t\t.then(res => { console.log(res.data) });\r\n\t\t\t//dispatch(runQuery(res.data));\r\n\t};\r\n\r\n\r\n\t//var url = \"https://api.spotify.com/v1/search?q=\";\r\n\t//Replaces white space with hexcode\r\n\t//const name = artist.replace(/\\s/g, \"%20\");\r\n\r\n\t//url = url.concat(name);\r\n\t//url = url.concat(\"&type=artist&limit=10\");\r\n\t//return dispatch => {\r\n\t//\taxios.get(url).then(res => {\r\n\t//\t\tdispatch(runQuery(res.data));\r\n\t//\t})\r\n\t//};\r\n}\r\n\r\nconst queryArtists = (artists) => {\r\n\tconsole.log(artists);\r\n\t//Iterate across artists. Filter?\r\n\r\n}"]},"metadata":{},"sourceType":"module"}