{"ast":null,"code":"/*\r\n * Authors: Austin Vanburen\r\n * Description: Actions for the ListOfArtists component.\r\n */\nimport axios from 'axios'; //Updates the string value represented in our search box and artists to their initial states.\n\nexport var clearSearch = function clearSearch() {\n  return {\n    type: \"CLEAR_SEARCH\",\n    payload: null\n  };\n};\n/* Data Sent BioPane Reducer.\r\n * Data Sent to Database:\r\n *\tartistId\r\n *\r\n * Data Retrieved:\r\n * \tartist = { ArtistId: int,\r\n *\t\t\t   ArtistName: string,\r\n *\t\t\t   YearStart: int,\r\n *\t\t\t   YearEnd: int (maybe NULL)\r\n * \t\t\t }\r\n */\n\nexport var fetchBio = function fetchBio(artistId) {\n  console.log(artistId);\n  return function (dispatch) {\n    axios.get('/bandtrees/api/v1/artists/' + artistId).then(function (res) {\n      dispatch(fetchBioSuccess(res.data));\n    }).catch(function (err) {//dispatch(activatePromotionFailure(err.message));\n    });\n  };\n};\n\nvar fetchBioSuccess = function fetchBioSuccess(artist) {\n  return {\n    type: \"FETCH_BIO\",\n    payload: artist\n  };\n};\n/* Data sent to BioPane Reducer\r\n * Data Sent to Database:\r\n * \t\tartistId\r\n *\r\n * Data Retrieved:\r\n * songs[] where\r\n * \tsong = {   SongId: int,\r\n *\t\t\t   SongName: string,\r\n *             AlbumName: string,\r\n *\t\t\t   AlbumYear: int,\r\n *             GenreName: string\r\n * \t\t\t }\r\n */\n\n\nexport var fetchSongs = function fetchSongs(artistId) {\n  console.log(artistId);\n  return function (dispatch) {\n    axios.get('/bandtrees/api/v1/artists/' + artistId + '/songs').then(function (res) {\n      dispatch(fetchSongsSuccess(res.data));\n    }).catch(function (err) {//dispatch(activatePromotionFailure(err.message));\n    });\n  };\n};\n\nvar fetchSongsSuccess = function fetchSongsSuccess(songs) {\n  return {\n    type: \"FETCH_SONGS\",\n    payload: songs\n  };\n};\n/* Data sent to Search Reducer\r\n * Data Retrieved:\r\n * artist[] where\r\n * \tartist = { ArtistId: int,\r\n *\t\t\t   ArtistName: string,\r\n *\t\t\t   YearStart: int,\r\n *\t\t\t   YearEnd: int (maybe NULL)\r\n * \t\t\t }\r\n */\n\n\nexport var fetchRelated = function fetchRelated(artistId) {\n  console.log(artistId);\n  return function (dispatch) {\n    axios.get('/bandtrees/api/v1/artists/' + artistId + '/related-artists').then(function (res) {\n      dispatch(fetchRelatedSuccess(res.data, artistId));\n    }).catch(function (err) {//dispatch(activatePromotionFailure(err.message));\n    });\n  };\n};\n\nvar fetchRelatedSuccess = function fetchRelatedSuccess(artists, artistId) {\n  console.log(artists);\n  var ret = [];\n\n  for (var i = 0; i < artists.length; i++) {\n    if (artists[i].InfluencerId = artistId) {\n      ret.push({\n        ArtistId: artists[i].InfluencedId,\n        ArtistName: artists[i].Influenced\n      });\n    } else if (a.InfluencedId = artistId) {\n      ret.push({\n        ArtistId: artists[i].InfluencerId,\n        ArtistName: artists[i].Influencer\n      });\n    }\n  }\n\n  console.log(ret);\n  return {\n    type: \"ARTIST_RELATED_SEARCH\",\n    payload: ret\n  };\n};","map":{"version":3,"sources":["/Users/asmith/Documents/cs364/bandtrees/client/src/actions/ListOfArtists_Actions.js"],"names":["axios","clearSearch","type","payload","fetchBio","artistId","console","log","dispatch","get","then","res","fetchBioSuccess","data","catch","err","artist","fetchSongs","fetchSongsSuccess","songs","fetchRelated","fetchRelatedSuccess","artists","ret","i","length","InfluencerId","push","ArtistId","InfluencedId","ArtistName","Influenced","a","Influencer"],"mappings":"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","sourcesContent":["/*\r\n * Authors: Austin Vanburen\r\n * Description: Actions for the ListOfArtists component.\r\n */\r\n\r\nimport axios from 'axios';\r\n\r\n//Updates the string value represented in our search box and artists to their initial states.\r\nexport const clearSearch = () => {\r\n\t return {\r\n \t\ttype: \"CLEAR_SEARCH\",\r\n \t\tpayload: null,\r\n \t}\r\n};\r\n\r\n/* Data Sent BioPane Reducer.\r\n * Data Sent to Database:\r\n *\tartistId\r\n *\r\n * Data Retrieved:\r\n * \tartist = { ArtistId: int,\r\n *\t\t\t   ArtistName: string,\r\n *\t\t\t   YearStart: int,\r\n *\t\t\t   YearEnd: int (maybe NULL)\r\n * \t\t\t }\r\n */\r\nexport const fetchBio = (artistId) => {\r\n\tconsole.log(artistId);\r\n\treturn dispatch => {\r\n\t\taxios\r\n\t\t\t.get('/bandtrees/api/v1/artists/' + artistId)\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(fetchBioSuccess(res.data));\r\n\t\t\t})\r\n\t\t\t.catch (err => {\r\n\t\t\t\t//dispatch(activatePromotionFailure(err.message));\r\n\t\t\t})\r\n\t};\r\n};\r\n\r\nconst fetchBioSuccess = (artist) => {\r\n\t return {\r\n \t\ttype: \"FETCH_BIO\",\r\n \t\tpayload: artist,\r\n \t}\r\n};\r\n\r\n/* Data sent to BioPane Reducer\r\n * Data Sent to Database:\r\n * \t\tartistId\r\n *\r\n * Data Retrieved:\r\n * songs[] where\r\n * \tsong = {   SongId: int,\r\n *\t\t\t   SongName: string,\r\n *             AlbumName: string,\r\n *\t\t\t   AlbumYear: int,\r\n *             GenreName: string\r\n * \t\t\t }\r\n */\r\nexport const fetchSongs = (artistId) => {\r\n\tconsole.log(artistId);\r\n\treturn dispatch => {\r\n\t\taxios\r\n\t\t\t.get('/bandtrees/api/v1/artists/' + artistId + '/songs')\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(fetchSongsSuccess(res.data));\r\n\t\t\t})\r\n\t\t\t.catch (err => {\r\n\t\t\t\t//dispatch(activatePromotionFailure(err.message));\r\n\t\t\t})\r\n\t};\r\n};\r\n\r\nconst fetchSongsSuccess = (songs) => {\r\n\t return {\r\n \t\ttype: \"FETCH_SONGS\",\r\n \t\tpayload: songs,\r\n \t}\r\n};\r\n\r\n/* Data sent to Search Reducer\r\n * Data Retrieved:\r\n * artist[] where\r\n * \tartist = { ArtistId: int,\r\n *\t\t\t   ArtistName: string,\r\n *\t\t\t   YearStart: int,\r\n *\t\t\t   YearEnd: int (maybe NULL)\r\n * \t\t\t }\r\n */\r\nexport const fetchRelated = (artistId) => {\r\n\tconsole.log(artistId);\r\n\treturn dispatch => {\r\n\t\taxios\r\n\t\t\t.get('/bandtrees/api/v1/artists/' + artistId + '/related-artists')\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(fetchRelatedSuccess(res.data, artistId));\r\n\t\t\t})\r\n\t\t\t.catch (err => {\r\n\t\t\t\t//dispatch(activatePromotionFailure(err.message));\r\n\t\t\t})\r\n\t};\r\n};\r\n\r\nconst fetchRelatedSuccess = (artists, artistId) => {\r\n    console.log(artists);\r\n\r\n    var ret = [];\r\n\r\n    for (let i = 0; i < artists.length; i++) {\r\n        if (artists[i].InfluencerId = artistId) {\r\n            ret.push({ArtistId:artists[i].InfluencedId, ArtistName:artists[i].Influenced});\r\n        } else if (a.InfluencedId = artistId) {\r\n            ret.push({ArtistId:artists[i].InfluencerId, ArtistName:artists[i].Influencer});\r\n        }\r\n    }\r\n\r\n    console.log(ret);\r\n\t return {\r\n \t\ttype: \"ARTIST_RELATED_SEARCH\",\r\n \t\tpayload: ret,\r\n \t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}