{"ast":null,"code":"import _classCallCheck from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/asmith/Documents/cs364/bandtrees/client/src/components/SpotifyQueryEntry/SpotifyQueryEntry_Container.js\";\n\n/*\r\n * Authors: Austin Vanburen\r\n * Description: Container for Query component. Connects HTML code (component) to our react-redux framework.\r\n * - Upon clicking button, string is sent to our server, which uses REST API principles to obtain data from spotify.\r\n * - String entry = Artist name.\r\n * - Successful spotify query will allow server to continue to populate database with corresponding spotify queries (albums etc.).\r\n */\n//React-Redux Boilerplate\nimport React, { Component } from 'react';\nimport { bindActionCreator } from 'redux';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; //Imported Components(Compnent HTML Injections && Containers)\n//Imported React-Strap components\n\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap'; //Imported Actions\n\nimport { runQuery } from '../../actions/SpotifyQueryEntry_Actions.js'; //Allows access to our storage. Storage -> Property\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n}; //Allows access to our actions. Action -> Property.\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    runQuery: runQuery\n  }, dispatch);\n}; //HTML rendered code.\n\n\nvar SpotifyQueryEntry =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SpotifyQueryEntry, _React$Component);\n\n  function SpotifyQueryEntry(props) {\n    var _this;\n\n    _classCallCheck(this, SpotifyQueryEntry);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SpotifyQueryEntry).call(this, props));\n    _this.state = {\n      artistName: \"\"\n    };\n    _this.handleEntryChange = _this.handleEntryChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleQueryClick = _this.handleQueryClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SpotifyQueryEntry, [{\n    key: \"handleEntryChange\",\n    value: function handleEntryChange(value) {\n      this.setState({\n        artistName: value\n      });\n    }\n  }, {\n    key: \"handleQueryClick\",\n    value: function handleQueryClick() {\n      this.props.runQuery(this.state.artistName);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"artistQuery\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Add to DB:\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"query\",\n        id: \"artistQuery\",\n        placeholder: \"'Nirvana'\",\n        onChange: function onChange(e) {\n          return _this2.handleEntryChange(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.handleQueryClick();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return SpotifyQueryEntry;\n}(React.Component);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpotifyQueryEntry);","map":{"version":3,"sources":["/Users/asmith/Documents/cs364/bandtrees/client/src/components/SpotifyQueryEntry/SpotifyQueryEntry_Container.js"],"names":["React","Component","bindActionCreator","connect","bindActionCreators","Button","Form","FormGroup","Label","Input","FormText","runQuery","mapStateToProps","state","mapDispatchToProps","dispatch","SpotifyQueryEntry","props","artistName","handleEntryChange","bind","handleQueryClick","value","setState","e","target"],"mappings":";;;;;;;;AAAA;;;;;;;AAQA;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,iBAAR,QAAgC,OAAhC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC,C,CAEA;AAEA;;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgDC,QAAhD,QAAgE,YAAhE,C,CAEA;;AACA,SAAQC,QAAR,QAAuB,4CAAvB,C,CAEA;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAClC,SAAO,EAAP;AAEA,CAHD,C,CAKA;;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACxC,SAAOX,kBAAkB,CAAC;AACzBO,IAAAA,QAAQ,EAAEA;AADe,GAAD,EAEtBI,QAFsB,CAAzB;AAGA,CAJD,C,CAMA;;;IACMC,iB;;;;;AACL,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,2FAAMA,KAAN;AAEA,UAAKJ,KAAL,GAAa;AACZK,MAAAA,UAAU,EAAE;AADA,KAAb;AAIA,UAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBC,IAAvB,uDAAzB;AACD,UAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,uDAAxB;AARgB;AAShB;;;;sCAEiBE,K,EAAO;AAC1B,WAAKC,QAAL,CAAc;AAACL,QAAAA,UAAU,EAAEI;AAAb,OAAd;AACE;;;uCAEkB;AAClB,WAAKL,KAAL,CAAWN,QAAX,CAAoB,KAAKE,KAAL,CAAWK,UAA/B;AACA;;;6BAEM;AAAA;;AACR,aACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACO,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,EAEC,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,EAAE,EAAC,aAAnC;AAAiD,QAAA,WAAW,EAAC,WAA7D;AACC,QAAA,QAAQ,EAAE,kBAAAM,CAAC;AAAA,iBAAI,MAAI,CAACL,iBAAL,CAAuBK,CAAC,CAACC,MAAF,CAASH,KAAhC,CAAJ;AAAA,SADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD,CADP,EAMO,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACD,gBAAL,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANP,CADD;AAUA;;;;EA/B8BrB,KAAK,CAACC,S;;AAkCtC,eAAeE,OAAO,CAACS,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CE,iBAA7C,CAAf","sourcesContent":["/*\r\n * Authors: Austin Vanburen\r\n * Description: Container for Query component. Connects HTML code (component) to our react-redux framework.\r\n * - Upon clicking button, string is sent to our server, which uses REST API principles to obtain data from spotify.\r\n * - String entry = Artist name.\r\n * - Successful spotify query will allow server to continue to populate database with corresponding spotify queries (albums etc.).\r\n */\r\n\r\n//React-Redux Boilerplate\r\nimport React, {Component} from 'react';\r\nimport {bindActionCreator} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\n//Imported Components(Compnent HTML Injections && Containers)\r\n\r\n//Imported React-Strap components\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\n\r\n//Imported Actions\r\nimport {runQuery} from '../../actions/SpotifyQueryEntry_Actions.js';\r\n\r\n//Allows access to our storage. Storage -> Property\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t}\r\n}\r\n\r\n//Allows access to our actions. Action -> Property.\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn bindActionCreators({\r\n\t\trunQuery: runQuery,\r\n\t}, dispatch);\r\n}\r\n\r\n//HTML rendered code.\r\nclass SpotifyQueryEntry extends React.Component{\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\r\n\t    this.state = {\r\n\t    \tartistName: \"\",\r\n\t    };\r\n\r\n\t    this.handleEntryChange = this.handleEntryChange.bind(this);\r\n  \t\tthis.handleQueryClick = this.handleQueryClick.bind(this);\r\n  \t}\r\n\r\n  \thandleEntryChange(value) {\r\n\t\tthis.setState({artistName: value});\r\n  \t}\r\n\r\n  \thandleQueryClick() {\r\n  \t\tthis.props.runQuery(this.state.artistName);\r\n  \t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Form>\r\n\t\t        <FormGroup>\r\n\t\t        \t<Label for=\"artistQuery\">Add to DB:</Label>\r\n\t\t        \t<Input type=\"text\" name=\"query\" id=\"artistQuery\" placeholder=\"'Nirvana'\"\r\n\t\t        \t\tonChange={e => this.handleEntryChange(e.target.value)}/>\r\n\t\t        </FormGroup>\r\n\t\t        <Button onClick={() => this.handleQueryClick()}>Submit</Button>\r\n\t\t    </Form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SpotifyQueryEntry);\r\n\r\n\r\n\r\n \t\r\n\r\n"]},"metadata":{},"sourceType":"module"}