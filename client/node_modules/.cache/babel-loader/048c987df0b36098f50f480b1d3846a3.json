{"ast":null,"code":"/*\n * Authors: Austin Vanburen\n * Description: Actions for the FilterBar component.\n */\nimport axios from 'axios';\n/* User searches for artist inspirations...\n * Data Sent:\n *\tartistId\n *\tfilters = { dropdownOpen: bool(this can be ignored),\n *    \t\t\tfilterDates: bool,\n *    \t\t\tfilterFeatures: bool,\n *    \t\t\tfilterCovers: bool,\n *    \t\t\tdateStart: int,\n *    \t\t\tdateEnd: int,\n *    \t\t  }\n *\n * Data Retrieved:\n *\tartists[] where\n * \tArtist = { ArtistId: int,\n *\t\t\t   ArtistName: string,\n *\t\t\t   DateStart: int (as a year),\n *\t\t\t   ImageURL: string,\n * \t\t\t }\n */\n\nexport var queryInspo = function queryInspo(artistId, filters) {\n  console.log(artistId);\n  console.log(filters);\n  return function (dispatch) {\n    axios.get('/bandtrees/api/v1/artists/' + artistId + '/relatedArtists', filters).then(function (res) {\n      dispatch(queryInspoSuccess(res.data));\n    }).catch(function (err) {//dispatch(activatePromotionFailure(err.message));\n    });\n  };\n};\n\nvar queryInspoSuccess = function queryInspoSuccess(artistId) {\n  return {\n    type: \"ARTIST_INSPO_SEARCH\",\n    payload: artistId\n  };\n};\n/* User searches for artists who are inspired by selected artist...\n * Data Sent:\n *\tartistId\n *\tfilters = { dropdownOpen: bool(this can be ignored),\n *    \t\t\tfilterDates: bool,\n *    \t\t\tfilterFeatures: bool,\n *    \t\t\tfilterCovers: bool,\n *    \t\t\tdateStart: int,\n *    \t\t\tdateEnd: int,\n *    \t\t  }\n *\n * Data Retrieved:\n *\tartists[] where\n * \tArtist = { ArtistId: int,\n *\t\t\t   ArtistName: string,\n *\t\t\t   DateStart: int (as a year),\n *\t\t\t   ImageURL: string,\n * \t\t\t }\n */\n\n\nexport var queryInspoFor = function queryInspoFor(artistId, filters) {\n  return function (dispatch) {\n    axios.post('http://localhost:3000/xxx', artistId, filters).then(function (res) {\n      dispatch(queryInspoSuccess(res.data));\n    }).catch(function (err) {//dispatch(activatePromotionFailure(err.message));\n    });\n  };\n};\n\nvar queryInspoForSuccess = function queryInspoForSuccess(artistId, filters) {\n  return {\n    type: \"ARTIST_INSPO_FOR_SEARCH\",\n    payload: artistId\n  };\n};","map":{"version":3,"sources":["/Users/asmith/Documents/cs364/bandtrees/client/src/actions/FilterBar_Actions.js"],"names":["axios","queryInspo","artistId","filters","console","log","dispatch","get","then","res","queryInspoSuccess","data","catch","err","type","payload","queryInspoFor","post","queryInspoForSuccess"],"mappings":"AAAA;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AAGA;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAWC,OAAX,EAAuB;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,SAAO,UAAAG,QAAQ,EAAI;AAClBN,IAAAA,KAAK,CACHO,GADF,CACM,+BAA+BL,QAA/B,GAA0C,iBADhD,EAEEC,OAFF,EAIEK,IAJF,CAIO,UAAAC,GAAG,EAAI;AACZH,MAAAA,QAAQ,CAACI,iBAAiB,CAACD,GAAG,CAACE,IAAL,CAAlB,CAAR;AACA,KANF,EAOEC,KAPF,CAOS,UAAAC,GAAG,EAAI,CACd;AACA,KATF;AAUA,GAXD;AAYA,CAfM;;AAiBP,IAAMH,iBAAiB,GAAG,SAApBA,iBAAoB,CAACR,QAAD,EAAc;AACtC,SAAO;AACNY,IAAAA,IAAI,EAAE,qBADA;AAENC,IAAAA,OAAO,EAAEb;AAFH,GAAP;AAID,CALD;AAOA;;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMc,aAAa,GAAG,SAAhBA,aAAgB,CAACd,QAAD,EAAWC,OAAX,EAAuB;AACnD,SAAO,UAAAG,QAAQ,EAAI;AAClBN,IAAAA,KAAK,CACHiB,IADF,CACO,2BADP,EAEEf,QAFF,EAEYC,OAFZ,EAIEK,IAJF,CAIO,UAAAC,GAAG,EAAI;AACZH,MAAAA,QAAQ,CAACI,iBAAiB,CAACD,GAAG,CAACE,IAAL,CAAlB,CAAR;AACA,KANF,EAOEC,KAPF,CAOS,UAAAC,GAAG,EAAI,CACd;AACA,KATF;AAUA,GAXD;AAYA,CAbM;;AAeP,IAAMK,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAChB,QAAD,EAAWC,OAAX,EAAuB;AACnD,SAAO;AACLW,IAAAA,IAAI,EAAE,yBADD;AAELC,IAAAA,OAAO,EAAEb;AAFJ,GAAP;AAIA,CALD","sourcesContent":["/*\n * Authors: Austin Vanburen\n * Description: Actions for the FilterBar component.\n */\n\nimport axios from 'axios';\n\n\n/* User searches for artist inspirations...\n * Data Sent:\n *\tartistId\n *\tfilters = { dropdownOpen: bool(this can be ignored),\n *    \t\t\tfilterDates: bool,\n *    \t\t\tfilterFeatures: bool,\n *    \t\t\tfilterCovers: bool,\n *    \t\t\tdateStart: int,\n *    \t\t\tdateEnd: int,\n *    \t\t  }\n *\n * Data Retrieved:\n *\tartists[] where\n * \tArtist = { ArtistId: int,\n *\t\t\t   ArtistName: string,\n *\t\t\t   DateStart: int (as a year),\n *\t\t\t   ImageURL: string,\n * \t\t\t }\n */\nexport const queryInspo = (artistId, filters) => {\n\tconsole.log(artistId);\n\tconsole.log(filters);\n\treturn dispatch => {\n\t\taxios\n\t\t\t.get('/bandtrees/api/v1/artists/' + artistId + '/relatedArtists',\n\t\t\t\tfilters\n\t\t\t)\n\t\t\t.then(res => {\n\t\t\t\tdispatch(queryInspoSuccess(res.data));\n\t\t\t})\n\t\t\t.catch (err => {\n\t\t\t\t//dispatch(activatePromotionFailure(err.message));\n\t\t\t})\n\t};\n};\n\nconst queryInspoSuccess = (artistId) => {\n \treturn {\n \t\ttype: \"ARTIST_INSPO_SEARCH\",\n \t\tpayload: artistId,\n \t}\n};\n\n/* User searches for artists who are inspired by selected artist...\n * Data Sent:\n *\tartistId\n *\tfilters = { dropdownOpen: bool(this can be ignored),\n *    \t\t\tfilterDates: bool,\n *    \t\t\tfilterFeatures: bool,\n *    \t\t\tfilterCovers: bool,\n *    \t\t\tdateStart: int,\n *    \t\t\tdateEnd: int,\n *    \t\t  }\n *\n * Data Retrieved:\n *\tartists[] where\n * \tArtist = { ArtistId: int,\n *\t\t\t   ArtistName: string,\n *\t\t\t   DateStart: int (as a year),\n *\t\t\t   ImageURL: string,\n * \t\t\t }\n */\nexport const queryInspoFor = (artistId, filters) => {\n\treturn dispatch => {\n\t\taxios\n\t\t\t.post('http://localhost:3000/xxx',\n\t\t\t\tartistId, filters\n\t\t\t)\n\t\t\t.then(res => {\n\t\t\t\tdispatch(queryInspoSuccess(res.data));\n\t\t\t})\n\t\t\t.catch (err => {\n\t\t\t\t//dispatch(activatePromotionFailure(err.message));\n\t\t\t})\n\t};\n};\n\nconst queryInspoForSuccess = (artistId, filters) => {\n\treturn {\n \t\ttype: \"ARTIST_INSPO_FOR_SEARCH\",\n \t\tpayload: artistId,\n \t};\n};\n"]},"metadata":{},"sourceType":"module"}