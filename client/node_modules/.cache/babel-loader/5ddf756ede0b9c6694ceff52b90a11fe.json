{"ast":null,"code":"import _classCallCheck from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/asmith/Documents/cs364/bandtrees/client/src/components/BioPane/BioPane_Container.js\";\n\n/*\r\n * Authors: Austin Vanburen\r\n * Description: Container for Query component. Connects HTML code (component) to our react-redux framework.\r\n * - Upon clicking button, string is sent to our server, which uses REST API principles to obtain data from spotify.\r\n * - String entry = Artist name.\r\n * - Successful spotify query will allow server to continue to populate database with corresponding spotify queries (albums etc.).\r\n */\n//React-Redux Boilerplate\nimport React, { Component } from 'react';\nimport { bindActionCreator } from 'redux';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; //Imported Components(Compnent HTML Injections && Containers)\n//Imported React-Strap components\n\nimport { Jumbotron, Container, Row, Col } from 'reactstrap'; //Imported Actions\n//Allows access to our storage. Storage -> Property\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    artist: state.bio\n  };\n}; //Allows access to our actions. Action -> Property.\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({}, dispatch);\n};\n/* \tartist = { ArtistId: int,\r\n*\t\t\t   ArtistName: string,\r\n*\t\t\t   YearStart: int,\r\n*\t\t\t   YearEnd: int (maybe NULL)\r\n* \t\t\t }\r\n *\r\n * songs[] where\r\n * \tsong = {   SongId: int,\r\n *\t\t\t   SongName: string,\r\n *             AlbumName: string,\r\n *\t\t\t   AlbumYear: int,\r\n *             GenreName: string\r\n * \t\t\t }\r\n */\n//HTML rendered code.\n\n\nvar BioPane =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BioPane, _React$Component);\n\n  function BioPane(props) {\n    var _this;\n\n    _classCallCheck(this, BioPane);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BioPane).call(this, props));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(BioPane, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Jumbotron, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Container, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"display-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, this.props.artist.ArtistName), React.createElement(\"p\", {\n        className: \"lead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Active \", this.props.artist.YearStart, \"-\", this.props.artist.YearEnd || 'present')));\n    }\n  }]);\n\n  return BioPane;\n}(React.Component);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BioPane);","map":{"version":3,"sources":["/Users/asmith/Documents/cs364/bandtrees/client/src/components/BioPane/BioPane_Container.js"],"names":["React","Component","bindActionCreator","connect","bindActionCreators","Jumbotron","Container","Row","Col","mapStateToProps","state","artist","bio","mapDispatchToProps","dispatch","BioPane","props","ArtistName","YearStart","YearEnd"],"mappings":";;;;;;;AAAA;;;;;;;AAQA;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,iBAAR,QAAgC,OAAhC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC,C,CAEA;AAEA;;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoCC,GAApC,QAA+C,YAA/C,C,CAEA;AAEA;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAClC,SAAO;AACNC,IAAAA,MAAM,EAAED,KAAK,CAACE;AADR,GAAP;AAGA,CAJD,C,CAMA;;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACxC,SAAOV,kBAAkB,CAAC,EAAD,EACtBU,QADsB,CAAzB;AAEA,CAHD;AAKA;;;;;;;;;;;;;;AAcA;;;IACMC,O;;;;;AACL,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,iFAAMA,KAAN;AAEA,UAAKN,KAAL,GAAa,EAAb;AAHe;AAKhB;;;;6BAEM;AACR,aACC,oBAAC,SAAD;AAAW,QAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACW,oBAAC,SAAD;AAAW,QAAA,KAAK,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2B,KAAKM,KAAL,CAAWL,MAAX,CAAkBM,UAA7C,CADA,EAEA;AAAG,QAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA4B,KAAKD,KAAL,CAAWL,MAAX,CAAkBO,SAA9C,OAA0D,KAAKF,KAAL,CAAWL,MAAX,CAAkBQ,OAAlB,IAA6B,SAAvF,CAFA,CADX,CADD;AAQA;;;;EAjBoBnB,KAAK,CAACC,S;;AAoB5B,eAAeE,OAAO,CAACM,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CE,OAA7C,CAAf","sourcesContent":["/*\r\n * Authors: Austin Vanburen\r\n * Description: Container for Query component. Connects HTML code (component) to our react-redux framework.\r\n * - Upon clicking button, string is sent to our server, which uses REST API principles to obtain data from spotify.\r\n * - String entry = Artist name.\r\n * - Successful spotify query will allow server to continue to populate database with corresponding spotify queries (albums etc.).\r\n */\r\n\r\n//React-Redux Boilerplate\r\nimport React, {Component} from 'react';\r\nimport {bindActionCreator} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\n\r\n//Imported Components(Compnent HTML Injections && Containers)\r\n\r\n//Imported React-Strap components\r\nimport { Jumbotron, Container, Row, Col } from 'reactstrap';\r\n\r\n//Imported Actions\r\n\r\n//Allows access to our storage. Storage -> Property\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tartist: state.bio,\r\n\t}\r\n}\r\n\r\n//Allows access to our actions. Action -> Property.\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn bindActionCreators({\r\n\t}, dispatch);\r\n}\r\n\r\n/* \tartist = { ArtistId: int,\r\n*\t\t\t   ArtistName: string,\r\n*\t\t\t   YearStart: int,\r\n*\t\t\t   YearEnd: int (maybe NULL)\r\n* \t\t\t }\r\n *\r\n * songs[] where\r\n * \tsong = {   SongId: int,\r\n *\t\t\t   SongName: string,\r\n *             AlbumName: string,\r\n *\t\t\t   AlbumYear: int,\r\n *             GenreName: string\r\n * \t\t\t }\r\n */\r\n//HTML rendered code.\r\nclass BioPane extends React.Component {\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\r\n\t    this.state = {\r\n\t    };\r\n  \t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Jumbotron fluid>\r\n              <Container fluid>\r\n              <h1 className='display-3'>{this.props.artist.ArtistName}</h1>\r\n              <p className=\"lead\">Active {this.props.artist.YearStart}-{this.props.artist.YearEnd || 'present'}</p>\r\n\t\t      </Container>\r\n\t\t    </Jumbotron>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BioPane);\r\n"]},"metadata":{},"sourceType":"module"}