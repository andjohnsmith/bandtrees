{"ast":null,"code":"/*\r\n * Authors: Austin Vanburen\r\n * Description: Actions for the FilterBar component.\r\n */\nimport axios from 'axios';\n/* User searches for artist inspirations...\r\n * Data Sent:\r\n *\tartistId \r\n *\tfilters = { dropdownOpen: bool(this can be ignored),\r\n *    \t\t\tfilterDates: bool,\r\n *    \t\t\tfilterFeatures: bool,\r\n *    \t\t\tfilterCovers: bool,\r\n *    \t\t\tdateStart: int,\r\n *    \t\t\tdateEnd: int, \r\n *    \t\t  }\r\n *\r\n * Data Retrieved:\r\n *\tartists[] where \r\n * \tArtist = { ArtistId: int,\r\n *\t\t\t   ArtistName: string,\r\n *\t\t\t   DateStart: int (as a year),\r\n *\t\t\t   ImageURL: string,\r\n * \t\t\t }\r\n */\n\nexport var queryInspo = function queryInspo(artistId, filters) {\n  console.log(artistId);\n  console.log(filters);\n  return function (dispatch) {\n    axios.get('/bandtrees/api/v1/artists/' + artistId + '/relatedArtists', filters).then(function (res) {\n      dispatch(queryInspoSuccess(res.data));\n    }).catch(function (err) {//dispatch(activatePromotionFailure(err.message));\n    });\n  };\n};\n\nvar queryInspoSuccess = function queryInspoSuccess(artists) {\n  return {\n    type: \"ARTIST_INSPO_SEARCH\",\n    payload: artists\n  };\n};\n/* User searches for artists who are inspired by selected artist...\r\n * Data Sent:\r\n *\tartistId \r\n *\tfilters = { dropdownOpen: bool(this can be ignored),\r\n *    \t\t\tfilterDates: bool,\r\n *    \t\t\tfilterFeatures: bool,\r\n *    \t\t\tfilterCovers: bool,\r\n *    \t\t\tdateStart: int,\r\n *    \t\t\tdateEnd: int, \r\n *    \t\t  }\r\n *\r\n * Data Retrieved:\r\n *\tartists[] where \r\n * \tArtist = { ArtistId: int,\r\n *\t\t\t   ArtistName: string,\r\n *\t\t\t   DateStart: int (as a year),\r\n *\t\t\t   ImageURL: string,\r\n * \t\t\t }\r\n */\n\n\nexport var queryInspoFor = function queryInspoFor(artistId, filters) {\n  return function (dispatch) {\n    axios.post('http://localhost:3000/xxx', {\n      artistId: artistId,\n      filters: filters\n    }).then(function (res) {\n      dispatch(queryInspoSuccess(res.data));\n    }).catch(function (err) {//dispatch(activatePromotionFailure(err.message));\n    });\n  };\n};\n\nvar queryInspoForSuccess = function queryInspoForSuccess(artistId, filters) {\n  return {\n    type: \"ARTIST_INSPO_FOR_SEARCH\",\n    payload: artistId\n  };\n};","map":{"version":3,"sources":["/Users/asmith/Documents/cs364/bandtrees/client/src/actions/FilterBar_Actions.js"],"names":["axios","queryInspo","artistId","filters","console","log","dispatch","get","then","res","queryInspoSuccess","data","catch","err","artists","type","payload","queryInspoFor","post","queryInspoForSuccess"],"mappings":"AAAA;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AAGA;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAWC,OAAX,EAAuB;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,SAAO,UAAAG,QAAQ,EAAI;AAClBN,IAAAA,KAAK,CACHO,GADF,CACM,+BAA+BL,QAA/B,GAA0C,iBADhD,EAEEC,OAFF,EAIEK,IAJF,CAIO,UAAAC,GAAG,EAAI;AACZH,MAAAA,QAAQ,CAACI,iBAAiB,CAACD,GAAG,CAACE,IAAL,CAAlB,CAAR;AACA,KANF,EAOEC,KAPF,CAOS,UAAAC,GAAG,EAAI,CACd;AACA,KATF;AAUA,GAXD;AAYA,CAfM;;AAiBP,IAAMH,iBAAiB,GAAG,SAApBA,iBAAoB,CAACI,OAAD,EAAa;AACrC,SAAO;AACNC,IAAAA,IAAI,EAAE,qBADA;AAENC,IAAAA,OAAO,EAAEF;AAFH,GAAP;AAID,CALD;AAOA;;;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACf,QAAD,EAAWC,OAAX,EAAuB;AACnD,SAAO,UAAAG,QAAQ,EAAI;AAClBN,IAAAA,KAAK,CACHkB,IADF,CACO,2BADP,EAEE;AAAEhB,MAAAA,QAAQ,EAARA,QAAF;AAAYC,MAAAA,OAAO,EAAPA;AAAZ,KAFF,EAIEK,IAJF,CAIO,UAAAC,GAAG,EAAI;AACZH,MAAAA,QAAQ,CAACI,iBAAiB,CAACD,GAAG,CAACE,IAAL,CAAlB,CAAR;AACA,KANF,EAOEC,KAPF,CAOS,UAAAC,GAAG,EAAI,CACd;AACA,KATF;AAUA,GAXD;AAYA,CAbM;;AAeP,IAAMM,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACjB,QAAD,EAAWC,OAAX,EAAuB;AACnD,SAAO;AACLY,IAAAA,IAAI,EAAE,yBADD;AAELC,IAAAA,OAAO,EAAEd;AAFJ,GAAP;AAIA,CALD","sourcesContent":["/*\r\n * Authors: Austin Vanburen\r\n * Description: Actions for the FilterBar component.\r\n */\r\n\r\nimport axios from 'axios';\r\n\r\n\r\n/* User searches for artist inspirations...\r\n * Data Sent:\r\n *\tartistId \r\n *\tfilters = { dropdownOpen: bool(this can be ignored),\r\n *    \t\t\tfilterDates: bool,\r\n *    \t\t\tfilterFeatures: bool,\r\n *    \t\t\tfilterCovers: bool,\r\n *    \t\t\tdateStart: int,\r\n *    \t\t\tdateEnd: int, \r\n *    \t\t  }\r\n *\r\n * Data Retrieved:\r\n *\tartists[] where \r\n * \tArtist = { ArtistId: int,\r\n *\t\t\t   ArtistName: string,\r\n *\t\t\t   DateStart: int (as a year),\r\n *\t\t\t   ImageURL: string,\r\n * \t\t\t }\r\n */\r\nexport const queryInspo = (artistId, filters) => {\r\n\tconsole.log(artistId);\r\n\tconsole.log(filters);\r\n\treturn dispatch => {\r\n\t\taxios\r\n\t\t\t.get('/bandtrees/api/v1/artists/' + artistId + '/relatedArtists',\r\n\t\t\t\tfilters\r\n\t\t\t)\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(queryInspoSuccess(res.data));\r\n\t\t\t})\r\n\t\t\t.catch (err => {\r\n\t\t\t\t//dispatch(activatePromotionFailure(err.message));\r\n\t\t\t})\r\n\t};\r\n};\r\n\r\nconst queryInspoSuccess = (artists) => {\r\n \treturn {\r\n \t\ttype: \"ARTIST_INSPO_SEARCH\",\r\n \t\tpayload: artists,\r\n \t}\r\n};\r\n\r\n/* User searches for artists who are inspired by selected artist...\r\n * Data Sent:\r\n *\tartistId \r\n *\tfilters = { dropdownOpen: bool(this can be ignored),\r\n *    \t\t\tfilterDates: bool,\r\n *    \t\t\tfilterFeatures: bool,\r\n *    \t\t\tfilterCovers: bool,\r\n *    \t\t\tdateStart: int,\r\n *    \t\t\tdateEnd: int, \r\n *    \t\t  }\r\n *\r\n * Data Retrieved:\r\n *\tartists[] where \r\n * \tArtist = { ArtistId: int,\r\n *\t\t\t   ArtistName: string,\r\n *\t\t\t   DateStart: int (as a year),\r\n *\t\t\t   ImageURL: string,\r\n * \t\t\t }\r\n */\r\nexport const queryInspoFor = (artistId, filters) => {\r\n\treturn dispatch => {\r\n\t\taxios\r\n\t\t\t.post('http://localhost:3000/xxx',\r\n\t\t\t\t{ artistId, filters },\r\n\t\t\t)\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(queryInspoSuccess(res.data));\r\n\t\t\t})\r\n\t\t\t.catch (err => {\r\n\t\t\t\t//dispatch(activatePromotionFailure(err.message));\r\n\t\t\t})\r\n\t};\r\n};\r\n\r\nconst queryInspoForSuccess = (artistId, filters) => {\r\n\treturn {\r\n \t\ttype: \"ARTIST_INSPO_FOR_SEARCH\",\r\n \t\tpayload: artistId,\r\n \t};\r\n};"]},"metadata":{},"sourceType":"module"}