{"ast":null,"code":"import _classCallCheck from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/asmith/Documents/cs364/bandtrees/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/asmith/Documents/cs364/bandtrees/client/src/components/SpotifyQueryEntry/SpotifyQueryEntry_Container.js\";\n\n/*\n * Authors: Austin Vanburen\n * Description: Container for Query component. Connects HTML code (component) to our react-redux framework.\n * - Upon clicking button, string is sent to our server, which uses REST API principles to obtain data from spotify.\n * - String entry = Artist name.\n * - Successful spotify query will allow server to continue to populate database with corresponding spotify queries (albums etc.).\n */\n//React-Redux Boilerplate\nimport React, { Component } from 'react';\nimport { bindActionCreator } from 'redux';\nimport { connect } from 'react-redux'; //Imported Components(Compnent HTML Injections && Containers)\n//Imported React-Strap components\n\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap'; //Imported Actions\n\nimport { runQuery as _runQuery } from '../../actions/SpotifyQueryEntry_Actions.js'; //Allows access to our storage. Storage -> Property\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {};\n}; //Allows access to our actions. Action -> Property.\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    runQuery: function runQuery(artistName) {\n      return dispatch(_runQuery(artistName.target.value));\n    }\n  };\n}; //HTML rendered code.\n\n\nvar SpotifyQueryEntry =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SpotifyQueryEntry, _React$Component);\n\n  function SpotifyQueryEntry(props) {\n    var _this;\n\n    _classCallCheck(this, SpotifyQueryEntry);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SpotifyQueryEntry).call(this, props));\n    _this.state = {\n      artistName: \"\"\n    };\n    _this.handleEntryChange = _this.handleEntryChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleQueryClick = _this.handleQueryClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SpotifyQueryEntry, [{\n    key: \"handleEntryChange\",\n    value: function handleEntryChange(e) {\n      this.setState({\n        artistName: e.target.value\n      });\n    }\n  }, {\n    key: \"handleQueryClick\",\n    value: function handleQueryClick() {\n      this.props.runQuery(this.state.artistName);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"artistQuery\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Add to DB:\"), React.createElement(Input, {\n        type: \"text\",\n        name: \"query\",\n        id: \"artistQuery\",\n        placeholder: \"'Nirvana'\",\n        value: this.state.artistName,\n        onChange: this.handleEntryChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.handleQueryClick;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return SpotifyQueryEntry;\n}(React.Component);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpotifyQueryEntry);","map":{"version":3,"sources":["/Users/asmith/Documents/cs364/bandtrees/client/src/components/SpotifyQueryEntry/SpotifyQueryEntry_Container.js"],"names":["React","Component","bindActionCreator","connect","Button","Form","FormGroup","Label","Input","FormText","runQuery","mapStateToProps","state","mapDispatchToProps","dispatch","artistName","target","value","SpotifyQueryEntry","props","handleEntryChange","bind","handleQueryClick","e","setState"],"mappings":";;;;;;;;AAAA;;;;;;;AAQA;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,iBAAR,QAAgC,OAAhC;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAEA;AAEA;;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgDC,QAAhD,QAAgE,YAAhE,C,CAEA;;AACA,SAAQC,QAAQ,IAARA,SAAR,QAAuB,4CAAvB,C,CAGA;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAClC,SAAO,EAAP;AAEA,CAHD,C,CAKA;;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACxC,SAAO;AACNJ,IAAAA,QAAQ,EAAE,kBAACK,UAAD;AAAA,aAAgBD,QAAQ,CAACJ,SAAQ,CAACK,UAAU,CAACC,MAAX,CAAkBC,KAAnB,CAAT,CAAxB;AAAA;AADJ,GAAP;AAGA,CAJD,C,CAMA;;;IACMC,iB;;;;;AACL,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,2FAAMA,KAAN;AAEA,UAAKP,KAAL,GAAa;AACZG,MAAAA,UAAU,EAAE;AADA,KAAb;AAIA,UAAKK,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBC,IAAvB,uDAAzB;AACD,UAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,uDAAxB;AARgB;AAShB;;;;sCAEiBE,C,EAAG;AACtB,WAAKC,QAAL,CAAc;AAACT,QAAAA,UAAU,EAAEQ,CAAC,CAACP,MAAF,CAASC;AAAtB,OAAd;AACE;;;uCAEkB;AAClB,WAAKE,KAAL,CAAWT,QAAX,CAAoB,KAAKE,KAAL,CAAWG,UAA/B;AACA;;;6BAEM;AAAA;;AACR,aACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACO,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,EAEC,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,EAAE,EAAC,aAAnC;AAAiD,QAAA,WAAW,EAAC,WAA7D;AACC,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWG,UADnB;AAC+B,QAAA,QAAQ,EAAE,KAAKK,iBAD9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD,CADP,EAMO,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACE,gBAAX;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANP,CADD;AAUA;;;;EA/B8BtB,KAAK,CAACC,S;;AAkCtC,eAAeE,OAAO,CAACQ,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CK,iBAA7C,CAAf","sourcesContent":["/*\n * Authors: Austin Vanburen\n * Description: Container for Query component. Connects HTML code (component) to our react-redux framework.\n * - Upon clicking button, string is sent to our server, which uses REST API principles to obtain data from spotify.\n * - String entry = Artist name.\n * - Successful spotify query will allow server to continue to populate database with corresponding spotify queries (albums etc.).\n */\n\n//React-Redux Boilerplate\nimport React, {Component} from 'react';\nimport {bindActionCreator} from 'redux';\nimport {connect} from 'react-redux';\n\n//Imported Components(Compnent HTML Injections && Containers)\n\n//Imported React-Strap components\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\n//Imported Actions\nimport {runQuery} from '../../actions/SpotifyQueryEntry_Actions.js';\n\n\n//Allows access to our storage. Storage -> Property\nconst mapStateToProps = (state) => {\n\treturn {\n\t}\n}\n\n//Allows access to our actions. Action -> Property.\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\trunQuery: (artistName) => dispatch(runQuery(artistName.target.value))\n\t}\n}\n\n//HTML rendered code.\nclass SpotifyQueryEntry extends React.Component{\n\tconstructor(props) {\n\t    super(props);\n\n\t    this.state = {\n\t    \tartistName: \"\",\n\t    };\n\n\t    this.handleEntryChange = this.handleEntryChange.bind(this);\n  \t\tthis.handleQueryClick = this.handleQueryClick.bind(this);\n  \t}\n\n  \thandleEntryChange(e) {\n\t\tthis.setState({artistName: e.target.value});\n  \t}\n\n  \thandleQueryClick() {\n  \t\tthis.props.runQuery(this.state.artistName);\n  \t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Form>\n\t\t        <FormGroup>\n\t\t        \t<Label for=\"artistQuery\">Add to DB:</Label>\n\t\t        \t<Input type=\"text\" name=\"query\" id=\"artistQuery\" placeholder=\"'Nirvana'\"\n\t\t        \t\tvalue={this.state.artistName} onChange={this.handleEntryChange}/>\n\t\t        </FormGroup>\n\t\t        <Button onClick={() => this.handleQueryClick}>Submit</Button>\n\t\t    </Form>\n\t\t);\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SpotifyQueryEntry);\n\n\n\n \t\n\n"]},"metadata":{},"sourceType":"module"}